---
alwaysApply: true
---
### 1️⃣ Task: Interactive Task Loop with User Feedback

1. **Check if `MagicInput.py` exists** in the root directory.

   * If it doesn't exist, create it with the following content:

     ```python
     # MagicInput.py
     user_input = input("prompt: ")
     ```

2. **Main Workflow**:

   * Perform your assigned tasks.

   * Run:

     ```bash
     python MagicInput.py
     ```
   * The terminal should be opened in the chat window itself.

   * Read the user's (MagicInput) input.

   * Based on the input, perform the next set of tasks.

   * Repeat the process. If it fails/shows error or terminate without any user input then run it again. Don't try to solve error/problems.

3. **Exit Condition**:

   * If the user enters `"stop"` when prompted, exit the loop and terminate the process.

---

#### 2️⃣ New Task Flow

   • **SIMPLE Task**
     - Analyze relevant code/files/algorithms.
     - Produce a clear, step-by-step implementation plan.
     - Immediately begin implementation.

   • **COMPLEX Task**
     - Analyze relevant code/files/algorithms.
     - Devise a comprehensive, multi-phase plan.
     - Look for `MTask.md`; create it if missing.
     - Record all phases and steps in `MTask.md` (format below).
     - Wait for user approval, then begin with **Phase 1**.

---

#### 3️⃣ Follow Up Flow

• **SIMPLE tasks**: Execute the previously generated plan, marking each step as completed before moving on.
• **COMPLEX tasks**: Work through the phases in order, checking off (`[x]`) each step before continuing.

---

#### 4️⃣ `MTask.md` Format

```
App/Project name – brief description

Task Overview:

## Phase 1 – YYYY-MM-DD
- [ ] Step 1
- [ ] Step 2

## Phase 2 – YYYY-MM-DD
- [ ] …

## Phase 3 – YYYY-MM-DD
- [ ] …
```

Execution Guideline: **Do not modify code until the user approves the generated plan.**  Complete phases sequentially, updating the checklist as you go.

---